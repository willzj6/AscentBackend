// <auto-generated />
using System;
using AscentBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AscentBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AscentBackend.Models.AssessmentCenter", b =>
                {
                    b.Property<int>("acId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("acId"));

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("acId");

                    b.HasIndex("userId");

                    b.ToTable("AssessmentCenters", (string)null);
                });

            modelBuilder.Entity("AscentBackend.Models.Availability", b =>
                {
                    b.Property<int>("availabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("availabilityId"));

                    b.Property<DateTime>("availability")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("availabilityId");

                    b.HasIndex("userId");

                    b.ToTable("Availabilities", (string)null);
                });

            modelBuilder.Entity("AscentBackend.Models.Candidate", b =>
                {
                    b.Property<int>("candidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("candidateId"));

                    b.Property<string>("contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("streamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("visaStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("candidateId");

                    b.HasIndex("streamName");

                    b.ToTable("Candidates", (string)null);
                });

            modelBuilder.Entity("AscentBackend.Models.Interview", b =>
                {
                    b.Property<int>("interviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("interviewId"));

                    b.Property<int>("assessmeCenteracId")
                        .HasColumnType("int");

                    b.Property<int>("candidateId")
                        .HasColumnType("int");

                    b.Property<string>("interviewPackpackName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("interviewId");

                    b.HasIndex("assessmeCenteracId");

                    b.HasIndex("candidateId");

                    b.HasIndex("interviewPackpackName");

                    b.HasIndex("userId");

                    b.ToTable("Interviews", (string)null);
                });

            modelBuilder.Entity("AscentBackend.Models.InterviewPack", b =>
                {
                    b.Property<string>("packName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("packName");

                    b.ToTable("InterviewsPacks", (string)null);
                });

            modelBuilder.Entity("AscentBackend.Models.Stream", b =>
                {
                    b.Property<string>("streamName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("streamName");

                    b.ToTable("Streams", (string)null);
                });

            modelBuilder.Entity("AscentBackend.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<string>("contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("InterviewPackStream", b =>
                {
                    b.Property<string>("interviewPackspackName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("streamsstreamName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("interviewPackspackName", "streamsstreamName");

                    b.HasIndex("streamsstreamName");

                    b.ToTable("InterviewPackStream", (string)null);
                });

            modelBuilder.Entity("InterviewPackUser", b =>
                {
                    b.Property<string>("interviewPackspackName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("usersuserId")
                        .HasColumnType("int");

                    b.HasKey("interviewPackspackName", "usersuserId");

                    b.HasIndex("usersuserId");

                    b.ToTable("InterviewPackUser", (string)null);
                });

            modelBuilder.Entity("AscentBackend.Models.AssessmentCenter", b =>
                {
                    b.HasOne("AscentBackend.Models.User", "coordinator")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("coordinator");
                });

            modelBuilder.Entity("AscentBackend.Models.Availability", b =>
                {
                    b.HasOne("AscentBackend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("AscentBackend.Models.Candidate", b =>
                {
                    b.HasOne("AscentBackend.Models.Stream", "stream")
                        .WithMany()
                        .HasForeignKey("streamName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("stream");
                });

            modelBuilder.Entity("AscentBackend.Models.Interview", b =>
                {
                    b.HasOne("AscentBackend.Models.AssessmentCenter", "assessmeCenter")
                        .WithMany()
                        .HasForeignKey("assessmeCenteracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AscentBackend.Models.Candidate", "candidate")
                        .WithMany()
                        .HasForeignKey("candidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AscentBackend.Models.InterviewPack", "interviewPack")
                        .WithMany()
                        .HasForeignKey("interviewPackpackName");

                    b.HasOne("AscentBackend.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("assessmeCenter");

                    b.Navigation("candidate");

                    b.Navigation("interviewPack");

                    b.Navigation("user");
                });

            modelBuilder.Entity("InterviewPackStream", b =>
                {
                    b.HasOne("AscentBackend.Models.InterviewPack", null)
                        .WithMany()
                        .HasForeignKey("interviewPackspackName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AscentBackend.Models.Stream", null)
                        .WithMany()
                        .HasForeignKey("streamsstreamName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterviewPackUser", b =>
                {
                    b.HasOne("AscentBackend.Models.InterviewPack", null)
                        .WithMany()
                        .HasForeignKey("interviewPackspackName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AscentBackend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("usersuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
